Review of the structure

* Layer 00

We need to have access to some storage which is IAsynChronousTable<byte> 
(currently called IContainer<byte>)

Several things plug into that including a file system. 
There is an intermediate BlockStorage that eases the conversion. 
Maybe this should be called IAsynchronousByteTableImplementer

* Layer 01

Communication between IAsynChronousTable<byte> 
Oh yes: this one is not done yet. 
Need to formalize the notion of protocol?
Should enable remote 

* Layer 02 

View a IAsynChronousTable<byte> as a ISynchronousTable<byte>
This is done by caching

One thing missing here is support for transactions. 
DESIGN OPTION 1 : transactions by systematic flushing of cache when written - cache will only pay in reading scenarios. 
DESIGN OPTION 2 : assumption that table will always be fully idisposed and we'll leave happily
DESIGN OPTION 3 : Think of support for Begin/End transactions. Ending should guarantee 

Let's keep in mind the goal is fully transparent data structures.

* Layer 03

Typed view. 
Given two IAsynChronousTable<byte> we can implement a 
IAsynchronousTable<XX> for some tuple types. 
That's cool.

We need two tables because non-fixed size encodings are supported - there is a question of how to GC that though.
DESIGN OPTION 1 : Give up and only provide fixed size strings. 
DESIGN OPTION 2 : Do not GC but provide the option to run "Compatify "
DESIGN OPTION 3 : strings fields are only provided with immutable collections. 
DESIGN OPTION 4 : Full fledged GC. Don't think about it.

* Layer 04

At some point we need to connect this a directory system - 
What we see as one collection with a root path becomes a bunch of files 

A related question is how this works when we have may collections within one - because we have a List<list<T>>!
Need for reference type. 

Note in all options 1-3 below the the small objects are catenated in a single file per type. 
DESIGN OPTION 1 : A data structure is always mapped to two files. Secondary file is used for all storage <=== **** INVESTIGATE THIS !!!! ****
DESIGN OPTION 2 : one container per internal generic thing. cantenate.

The supported schemas are option to discussion: 

DESIGN OPTION 1 : The only generic nesting is FixedSizedArray<T> 
DESIGN OPTION 2 : The only generic nesting is SmallArray<T> 
DESIGN OPTION 3 : The only generic nesting is SmallList<T> 
DESIGN OPTION 4 : Some full support 
Issue of 

* Layer 05

Actual Persisted.Collections! 
Public API
Provide: List<T> ; Dictionary<T> ; Set<T> ; Queue<T> ; Stack<T>

